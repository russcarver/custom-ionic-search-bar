/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';


import {
  Color,
  Mode,
  TextInputChangeEvent,
} from './interface';
import {
  EventEmitter,
} from '@stencil/core';


export namespace Components {

  interface CiSearchBar {
    /**
    * If `true`, enable searchbar animation.
    */
    'animated': boolean;
    /**
    * Set the input's autocomplete property.
    */
    'autocomplete': 'on' | 'off';
    /**
    * Set the input's autocorrect property.
    */
    'autocorrect': 'on' | 'off';
    /**
    * Set the cancel button icon. Only applies to `md` mode.
    */
    'cancelButtonIcon': string;
    /**
    * Set the the cancel button text. Only applies to `ios` mode.
    */
    'cancelButtonText': string;
    /**
    * Set the clear icon. Defaults to `"close-circle"` for `ios` and `"close"` for `md`.
    */
    'clearIcon'?: string;
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
    /**
    * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke.
    */
    'debounce': number;
    /**
    * The mode determines which platform styles to use.
    */
    'mode': Mode;
    /**
    * Set the input's placeholder.
    */
    'placeholder': string;
    /**
    * The icon to use as the search icon.
    */
    'searchIcon': string;
    /**
    * Sets focus on the specified `ion-searchbar`. Use this method instead of the global `input.focus()`.
    */
    'setFocus': () => void;
    /**
    * If `true`, show the cancel button.
    */
    'showCancelButton': boolean;
    /**
    * If `true`, enable spellcheck on the input.
    */
    'spellcheck': boolean;
    /**
    * Set the type of the input.
    */
    'type': 'text' | 'password' | 'email' | 'number' | 'search' | 'tel' | 'url';
    /**
    * the value of the searchbar.
    */
    'value'?: string | null;
  }
  interface CiSearchBarAttributes extends StencilHTMLAttributes {
    /**
    * If `true`, enable searchbar animation.
    */
    'animated'?: boolean;
    /**
    * Set the input's autocomplete property.
    */
    'autocomplete'?: 'on' | 'off';
    /**
    * Set the input's autocorrect property.
    */
    'autocorrect'?: 'on' | 'off';
    /**
    * Set the cancel button icon. Only applies to `md` mode.
    */
    'cancelButtonIcon'?: string;
    /**
    * Set the the cancel button text. Only applies to `ios` mode.
    */
    'cancelButtonText'?: string;
    /**
    * Set the clear icon. Defaults to `"close-circle"` for `ios` and `"close"` for `md`.
    */
    'clearIcon'?: string;
    /**
    * The color to use from your application's color palette. Default options are: `"primary"`, `"secondary"`, `"tertiary"`, `"success"`, `"warning"`, `"danger"`, `"light"`, `"medium"`, and `"dark"`. For more information on colors, see [theming](/docs/theming/basics).
    */
    'color'?: Color;
    /**
    * Set the amount of time, in milliseconds, to wait to trigger the `ionChange` event after each keystroke.
    */
    'debounce'?: number;
    /**
    * The mode determines which platform styles to use.
    */
    'mode'?: Mode;
    /**
    * Emitted when the input loses focus.
    */
    'onIonBlur'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the cancel button is clicked.
    */
    'onIonCancel'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the value has changed.
    */
    'onIonChange'?: (event: CustomEvent<TextInputChangeEvent>) => void;
    /**
    * Emitted when the clear input button is clicked.
    */
    'onIonClear'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when the input has focus.
    */
    'onIonFocus'?: (event: CustomEvent<void>) => void;
    /**
    * Emitted when a keyboard input ocurred.
    */
    'onIonInput'?: (event: CustomEvent<KeyboardEvent>) => void;
    /**
    * Set the input's placeholder.
    */
    'placeholder'?: string;
    /**
    * The icon to use as the search icon.
    */
    'searchIcon'?: string;
    /**
    * If `true`, show the cancel button.
    */
    'showCancelButton'?: boolean;
    /**
    * If `true`, enable spellcheck on the input.
    */
    'spellcheck'?: boolean;
    /**
    * Set the type of the input.
    */
    'type'?: 'text' | 'password' | 'email' | 'number' | 'search' | 'tel' | 'url';
    /**
    * the value of the searchbar.
    */
    'value'?: string | null;
  }
}

declare global {
  interface StencilElementInterfaces {
    'CiSearchBar': Components.CiSearchBar;
  }

  interface StencilIntrinsicElements {
    'ci-search-bar': Components.CiSearchBarAttributes;
  }


  interface HTMLCiSearchBarElement extends Components.CiSearchBar, HTMLStencilElement {}
  var HTMLCiSearchBarElement: {
    prototype: HTMLCiSearchBarElement;
    new (): HTMLCiSearchBarElement;
  };

  interface HTMLElementTagNameMap {
    'ci-search-bar': HTMLCiSearchBarElement
  }

  interface ElementTagNameMap {
    'ci-search-bar': HTMLCiSearchBarElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
